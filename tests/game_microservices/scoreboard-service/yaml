pipeline {
    agent {
        kubernetes {
            inheritFrom 'podman'
            //customWorkspace '/home/jenkins/agent'
        }
    }

    environment {
        GIT_BRANCH = 'main' // 默认分支
        MAJOR_VERSION = 'v1' // 主版本号
        MINOR_VERSION = '0' // 次版本号
    }

    triggers {
        githubPush() // github 自动扫描代码是否更新并触发构建任务
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
    }

    stages {
        stage('Version') {
            steps {
                script {
                    // 构建 patch 版本号，使用 BUILD_NUMBER 作为构建修订号
                    env.PATCH_VERSION = "${env.BUILD_NUMBER}"
                    env.VERSION_NUMBER = "${env.MAJOR_VERSION}.${env.MINOR_VERSION}.${env.PATCH_VERSION}"
                    echo "Current Version: ${env.VERSION_NUMBER}"
                }
            }
        }

        stage('Checkout') {
            steps {
                cleanWs() // 清理工作空间
                script {
                    env.GIT_BRANCH = params.BRANCH // 使用参数更新环境变量中的分支名称
                }
                // 执行 Git 检出
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: "*/${env.GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Roliyal/CROlordCodelibrary.git'
                    ]],
                    extensions: [
                        [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]
                    ]
                ]
                echo '代码检出完成'
            }
        }

        stage('Check Directory') {
            steps {
                // 打印当前工作目录的路径
                echo "Current working directory: ${pwd()}"

                // 列出当前工作目录中的文件
                sh 'ls -l'
            }
        }

        stage('Build and Push Docker Image with podman') {
            steps {
                script {
                    // 使用 Jenkins 凭据登录到镜像仓库
                     //withCredentials([usernamePassword(credentialsId: 'ACR-registry-credentials', usernameVariable: 'secret-credentials-acr-username', passwordVariable: 'secret-credentials-acr-password')]) {
                        // 登录到镜像仓库
                        // sh "podman login -u ${secret-credentials-acr-username} -p ${secret-credentials-acr-password} crolord-ack-registry-vpc.cn-hongkong.cr.aliyuncs.com"
                        //sh "podman login --username=eb@1375983257165921 --password=CROLord@123 crolord-ack-registry-vpc.cn-hongkong.cr.aliyuncs.com"
                    //}

                    // 指定在包含 podman 的容器中执行命令
                    container('podman') {
                        sh "podman login --username=eb@1375983257165921 --password=CROLord@123 crolord-ack-registry-vpc.cn-hongkong.cr.aliyuncs.com"
                        // 设置 podman 镜像的标签
                        def dockerImageTag = "crolord-ack-registry-vpc.cn-hongkong.cr.aliyuncs.com/febe/febe-front-uat:${env.MAJOR_VERSION}.${env.MINOR_VERSION}.${env.BUILD_NUMBER}"
                        // 切换到包含 Dockerfile 的目录
                        dir('Chapter2KubernetesApplicationBuild/Unit2CodeLibrary/FEBEseparation/vue-go-guess-number') {
                            // 使用 podman 构建 Docker 镜像
                            sh "podman build --security-opt label=disable -t ${dockerImageTag} ."
                            // 推送镜像到 Docker 仓库
                            sh "podman push ${dockerImageTag}"
                        }
                    }
                }
            }
        }
        // 在此处添加其他构建阶段，例如 'Test', 'Deploy' 等...
    }
}
    post {
        always {
            echo '执行了 always 块'
        }
        success {
            dingtalk(
                robot: 'c5cdfa6f-1454-4ed0-b135-0189a1035d6d',
                type: io.jenkins.plugins.enums.MsgTypeEnum.MARKDOWN,
                title: '构建通知',
                text: ["### 构建成功", "分支：**${env.GIT_BRANCH}**，版本：**${env.VERSION_NUMBER}**。\n[查看更多信息](${env.BUILD_URL})"]
            )
        }
        failure {
            dingtalk(
                robot: 'c5cdfa6f-1454-4ed0-b135-0189a1035d6d',
                type: io.jenkins.plugins.enums.MsgTypeEnum.MARKDOWN,
                title: '构建通知',
                text: ["### 构建失败", "分支：**${env.GIT_BRANCH}**，版本：**${env.VERSION_NUMBER}**。\n[详细错误信息请查看](${env.BUILD_URL})"]
            )
        }
    }